-- CREATE TABLE IF NOT EXISTS categories (
--   id SERIAL PRIMARY KEY,
--   name VARCHAR(255) NOT NULL
-- );

-- INSERT INTO categories (id, name) VALUES
-- (1, 'Desi Ghee'),
-- (13, 'Refined'),
-- (14, 'Test 4'),
-- (15, 'Bakery'),
-- (16, 'Khoya'),
-- (17, 'Paneer');

-- CREATE TABLE IF NOT EXISTS expenses (
--   expense_id SERIAL PRIMARY KEY,
--   amount NUMERIC(10,2) NOT NULL,
--   description VARCHAR(255) NOT NULL,
--   outlet_id INTEGER NOT NULL,
--   expense_date DATE DEFAULT NULL
-- );

-- INSERT INTO expenses (expense_id, amount, description, outlet_id, expense_date) VALUES
-- (2, 100.00, 'Test Expense', 2, '2023-05-25');

-- CREATE TABLE IF NOT EXISTS order_items (
--   order_item_id SERIAL PRIMARY KEY,
--   order_id INTEGER DEFAULT NULL,
--   product_id INTEGER DEFAULT NULL,
--   quantity INTEGER DEFAULT NULL,
--   price NUMERIC(10,2) DEFAULT NULL
-- );

-- CREATE TABLE IF NOT EXISTS orders (
--   order_id SERIAL PRIMARY KEY,
--   customer_name VARCHAR(255) DEFAULT NULL,
--   customer_address VARCHAR(255) DEFAULT NULL,
--   mobile_number DECIMAL(10,0) DEFAULT NULL,
--   delivery_date DATE DEFAULT NULL,
--   delivery_time TIME DEFAULT NULL,
--   order_date DATE DEFAULT NULL,
--   total_amount NUMERIC(10,2) DEFAULT NULL,
--   discount NUMERIC(10,2) DEFAULT NULL,
--   note VARCHAR(255) DEFAULT NULL,
--   status VARCHAR(255) NOT NULL DEFAULT 'pending'
-- );

-- CREATE TABLE IF NOT EXISTS outlet_inventory (
--   inventory_id INTEGER NOT NULL,
--   outlet_id INTEGER DEFAULT NULL,
--   product_id INTEGER DEFAULT NULL,
--   quantity_available INTEGER DEFAULT NULL,
--   PRIMARY KEY (inventory_id)
-- );

-- INSERT INTO outlet_inventory (inventory_id, outlet_id, product_id, quantity_available) VALUES
-- (1, 1, 1, 120),
-- (2, 2, 1, 80),
-- (3, 1, 2, 12),
-- (4, 2, 2, 56);

-- CREATE TABLE IF NOT EXISTS outlets (
--   outlet_id SERIAL PRIMARY KEY,
--   outlet_name VARCHAR(255) DEFAULT NULL,
--   address VARCHAR(255) DEFAULT NULL,
--   phone VARCHAR(15) DEFAULT NULL,
--   email VARCHAR(255) DEFAULT NULL
-- );

-- INSERT INTO outlets (outlet_id, outlet_name, address, phone, email) VALUES
-- (1, 'Mohan Lal Ganj', 'Lucknow', '1234567890', 'test@test.com'),
-- (2, 'Outlet 2', 'Lucknow', '1234567890', 'test@test.com');

-- CREATE TABLE IF NOT EXISTS product_raw_materials (
--   product_raw_material_id SERIAL PRIMARY KEY,
--   product_id INTEGER DEFAULT NULL,
--   raw_material_id INTEGER DEFAULT NULL,
--   quantity_required INTEGER DEFAULT NULL
-- );

-- CREATE TABLE IF NOT EXISTS products (
--   id SERIAL PRIMARY KEY,
--   product_name VARCHAR(255) NOT NULL,
--   description TEXT,
--   price NUMERIC(10,2) NOT NULL,
--   image_url VARCHAR(255) NOT NULL DEFAULT '',
--   unit VARCHAR(255) DEFAULT NULL,
--   category_id INTEGER DEFAULT NULL,
--   status VARCHAR(255) NOT NULL DEFAULT 'active'
-- );

-- INSERT INTO products (id, product_name, description, price, image_url, unit, category_id, status) VALUES
-- (1, 'Laddu', 'Bundi Laddu', 200.00, '', 'Kg', 1, 'active'),
-- (2, 'New Product', '', 0.00, '', '', 0, 'active');

-- CREATE TABLE IF NOT EXISTS raw_materials (
--   raw_material_id SERIAL PRIMARY KEY,
--   raw_material_name VARCHAR(255) NOT NULL,
--   description TEXT,
--   unit VARCHAR(255) DEFAULT NULL,
--   category_id INTEGER DEFAULT NULL,
--   status VARCHAR(255) NOT NULL DEFAULT 'active'
-- );

-- INSERT INTO raw_materials (raw_material_id, raw_material_name, description, unit, category_id, status) VALUES
-- (1, 'Sugar', '', 'Kg', 13, 'active'),
-- (2, 'Salt', '', 'Kg', 13, 'active');

-- ALTER TABLE order_items ADD CONSTRAINT fk_order_items_order_id FOREIGN KEY (order_id) REFERENCES orders (order_id);
-- ALTER TABLE order_items ADD CONSTRAINT fk_order_items_product_id FOREIGN KEY (product_id) REFERENCES products (id);
-- ALTER TABLE outlet_inventory ADD CONSTRAINT fk_outlet_inventory_outlet_id FOREIGN KEY (outlet_id) REFERENCES outlets (outlet_id);
-- ALTER TABLE outlet_inventory ADD CONSTRAINT fk_outlet_inventory_product_id FOREIGN KEY (product_id) REFERENCES products (id);
-- ALTER TABLE product_raw_materials ADD CONSTRAINT fk_product_raw_materials_product_id FOREIGN KEY (product_id) REFERENCES products (id);
-- ALTER TABLE product_raw_materials ADD CONSTRAINT fk_product_raw_materials_raw_material_id FOREIGN KEY (raw_material_id) REFERENCES raw_materials (raw_material_id);
-- DROP TABLE IF EXISTS products;
-- CREATE TABLE IF NOT EXISTS products (
--   id SERIAL PRIMARY KEY,
--   product_name VARCHAR(255) NOT NULL,
--   description TEXT,
--   price NUMERIC(10,2) NOT NULL,
--   image_url VARCHAR(255) NOT NULL DEFAULT '',
--   unit VARCHAR(255) DEFAULT NULL,
--   category_id INTEGER DEFAULT NULL,
--   status VARCHAR(255) NOT NULL DEFAULT 'active'
-- );

-- INSERT INTO products (id, product_name, description, price, image_url, unit, category_id, status) VALUES
-- (3, 'Laddu', 'Bundi Laddu', 200.00, '', 'Kg', 1, 'active'),
-- (4, 'New Product', NULL, 110.00, 'test', NULL, 1, 'active'),
-- (5, 'Test Product', NULL, 123.00, '', 'Kg', 1, 'active'),
-- (6, 'Refined Laddu', NULL, 50.00, '', 'Piece', 13, 'active'),
-- (7, 'Kaju Katli', NULL, 120.00, '', 'Piece', 16, 'active');

-- DROP TABLE IF EXISTS rawmaterials;
-- CREATE TABLE IF NOT EXISTS rawmaterials (
--   rawmaterial_id SERIAL PRIMARY KEY,
--   rawmaterial_name VARCHAR(255) DEFAULT NULL,
--   description VARCHAR(255) DEFAULT NULL
-- );

-- DROP TABLE IF EXISTS warehouse;
-- CREATE TABLE IF NOT EXISTS warehouse (
--   warehouse_id SERIAL PRIMARY KEY,
--   warehouse_name VARCHAR(255) DEFAULT NULL,
--   address VARCHAR(255) DEFAULT NULL,
--   phone VARCHAR(15) DEFAULT NULL,
--   email VARCHAR(255) DEFAULT NULL
-- );

-- INSERT INTO warehouse (warehouse_id, warehouse_name, address, phone, email) VALUES
-- (1, 'Main warehouse', 'Kanpur', NULL, NULL);

-- DROP TABLE IF EXISTS warehouse_inventory;
-- CREATE TABLE IF NOT EXISTS warehouse_inventory (
--   inventory_id SERIAL PRIMARY KEY,
--   warehouse_id INTEGER DEFAULT NULL,
--   product_id INTEGER DEFAULT NULL,
--   quantity_available INTEGER DEFAULT NULL,
--   CONSTRAINT fk_warehouse_inventory_warehouse_id FOREIGN KEY (warehouse_id) REFERENCES warehouse (warehouse_id),
--   CONSTRAINT fk_warehouse_inventory_product_id FOREIGN KEY (product_id) REFERENCES products (id)
-- );

-- INSERT INTO warehouse_inventory (inventory_id, warehouse_id, product_id, quantity_available) VALUES
-- (1, 1, 1, 230),
-- (2, 1, 2, 120);